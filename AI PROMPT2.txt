I have a database of resources on nocodb cloud, and an API Endpoint App hosted on cloudflare workers that fetches the data and returns it as json data.  The code of this API endpoint is:



addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});async function handleRequest(request) {
  const url = new URL(request.url);
  const page = parseInt(url.searchParams.get('page')) || 1; // Get the 'page' parameter, default to 1
  const pageSize = 25; // We know this from the NocoDB response
  const offset = (page - 1) * pageSize;
  const nocodbApiUrl = `https://app.nocodb.com/api/v2/tables/mu8v5qw718w8hkd/records?limit=${pageSize}&offset=${offset}`;
  const apiToken = 'IG35M16lOwlnPQWP3EcNcjI6nO7jXE4zBWvhdIOL';
  try {
    const response = await fetch(nocodbApiUrl, {
      headers: {
        'xc-token': apiToken,
        'Content-Type': 'application/json',
      },
    });
    if (!response.ok) {
      console.error(`NocoDB API request failed with status: ${response.status}`);
      return new Response('Failed to fetch data from NocoDB', { status: 500 });
    }
    const data = await response.json();
    return new Response(JSON.stringify(data), { // We are now passing the full NocoDB response
      headers: {
        'Content-Type': 'application/json',
      },
    });
  } catch (error) {
    console.error('Error fetching data from NocoDB:', error);
    return new Response('Error fetching data from NocoDB', { status: 500 });
  }
}

The url is:  resourcesdatabaseproxy.crodican.workers.dev

Here is a sample of the return of that page, with only 2 items.  Each page has 25 items, my database has about 300 total items:
{
    "list": [{
        "Id": 1
        , "Location Name": "Berks County Council on Chemical Abuse"
        , "Organization": "Berks County Council on Chemical Abuse"
        , "County": "Berks"
        , "Resource Type": "Recovery Support"
        , "Category": "Single County Authority"
        , "Populations Served": "Men, Women"
        , "More Info": null
        , "Phone": "610-376-8669"
        , "Address": "601 Penn Street, Suite 60"
        , "City": "Reading"
        , "State": "PA"
        , "Zip Code": "19601"
        , "Website": "https://cocaberks.org/"
        , "Image": "https://resourcespage.pages.dev/assets/resource-logos/coca.png"
        , "Latitude": "40.3356"
        , "Longitude": "-75.9269"
        , "Phone URL": "tel://+16103768669"
        , "Full Address": "601 Penn Street, Suite 60, Reading, PA, 19601"
        , "Google Maps URL": "https://www.google.com/maps/search/?api=1&query=601%20Penn%20Street%2C%20Suite%2060%2CReading%2CPA%2C19601"
        , "CreatedAt": "2025-04-10 23:14:45+00:00"
        , "UpdatedAt": "2025-04-10 23:35:46+00:00"
    }, {
        "Id": 2
        , "Location Name": "Bucks County Drug & Alcohol Commission"
        , "Organization": "Bucks County Drug & Alcohol Commission"
        , "County": "Bucks"
        , "Resource Type": "Recovery Support"
        , "Category": "Single County Authority"
        , "Populations Served": "Men, Women"
        , "More Info": null
        , "Phone": "215-444-2700"
        , "Address": "55 East Court Street, 4th Floor"
        , "City": "Doylestown"
        , "State": "PA"
        , "Zip Code": "18901"
        , "Website": "https://www.bcdac.org/"
        , "Image": "https://resourcespage.pages.dev/assets/resource-logos/bcdac.png"
        , "Latitude": "40.3101"
        , "Longitude": "-75.1299"
        , "Phone URL": "tel://+12154442700"
        , "Full Address": "55 East Court Street, 4th Floor, Doylestown, PA, 18901"
        , "Google Maps URL": "https://www.google.com/maps/search/?api=1&query=55%20East%20Court%20Street%2C%204th%20Floor%2CDoylestown%2CPA%2C18901"
        , "CreatedAt": "2025-04-10 23:14:45+00:00"
        , "UpdatedAt": "2025-04-10 23:36:03+00:00"
    }]
    , "pageInfo": {
        "totalRows": 295
        , "page": 1
        , "pageSize": 25
        , "isFirstPage": true
        , "isLastPage": false
    }
    , "stats": {
        "dbQueryTime": "9.264"
    }
}

Going to the next pages would be:
"resourcesdatabaseproxy.crodican.workers.dev/?page=2", "resourcesdatabaseproxy.crodican.workers.dev/?page=3", "resourcesdatabaseproxy.crodican.workers.dev/?page=4", and so on...

My ultimate goal is a web app or page for these resources, with search, checkbox filters, chips to show what checkbox filters or search terms have been applied, a dropdown for sorting
by distance, alphabetical, or relevance, and the resources in the form of cards, listed in a flex-column, with pagination to show 25 results at a time, a counter at the top to say it is showing (x) of (y) results, and a "Show More" button at the bottom that adds 25 more resouces at a time when pressed.

To achieve this, should we make any changes to our API Endpoint App?  Or is it ready, and we can move on to the web page app?
I am hoping to have an app i can host on cloudflare workers, that will make a page we can design using bootstrap components.  what framework should we use?




I need help to develop a bootstrap css html web page that allows the searching, filtering and displaying of a collection of resources from a NocoDB

database, in custom bootstrap cards.



I have a template for the resource cards. My database contains the following columns: ID, LOCATION NAME, ORGANIZATION, COUNTY, RESOURCE TYPE, CATEGORY, 

POPULATIONS, MORE INFO, PHONE,  ADDRESS, CITY, STATE, ZIP CODE, WEBSITE, IMAGE, LATITUDE, LONGITUDE, PHONE URL, FULL ADDRESS, and 

GOOGLE MAPS URL.  Of those columns, COUNTY, RESOURCE TYPE, CATEGORY, and POPULATIONS are the facets which will be used for filtering.

The rest are the attributes.



There are about 300 resources. 



I need a page to search and filter the resources and display them as bootstrap cards. 



The page should have the following structure:  



Body font is Oxygen, except all headers which are Lora.  Google fonts will suffice.

We will also need bootstrap icons for the page.



A search bar at the top ( need the cards to update as info is typed into the search bar, and if enter is pressed or the search button 

clicked, the text from the box clears, and the searched term becomes a chip in the chips area below the search bar). 

Additionally, i would like CTRL+K to automatically focus the search bar.   The search bar should be a bootstrap input group,

with the following template:



                <div class="input-group">             

                    <input type="text" id="search-input"  class="form-control border-0 bg-gray-subtle py-0 px-4" placeholder="Search resources...">

                    <div class="input-group-append kbd">

                        <div class="bg-gray-subtle px-2 py-1 d-flex" style="height: 100%">

                            <span><kbd>CTRL</kbd> + <kbd>K</kbd></span>

                        </div>

                    </div>

                    <div class="input-group-append">

                        <button class="btn customButton--secondary py-1 px-3 searchButton" type="button"

                            style="border-radius: 1px 10px 10px 1px !important">

                            <span class="bi bi-search"></span>

                        </button>

                    </div>

                </div>



Below the search bar an area for chips for any of the filters applied ( I would like a chip created for the search terms after 
enter is pressed or after a filter is checked in the checkbox filters).  These chips should 
look like or use the bootstrap badge class, with a bg color of #f5ebf3 and a text color of
#000.

Below the chip area should be the filters area, in a bootstrap row, with an H2 heading that says 'Filters', with a toggle to display the 
four Facets below, each of which should be in a column set to "col-lg-3 col-md-3 
col-sm-10".  Each column should have an H5 heading, and below that should be the checkbox filters, using bootstrap's form-check, 
form-check-imput, and form-check-label classes.

-COUNTIES: The options should be Philadelphia, Berks, Bucks, Chester, Delaware, Lancaster, Montgomery, and Schuylkill
-POPULATIONS: The options should be Men, Women, Children, and Adolescents
-RESOURCE TYPES: The options should be Recovery Support, Family Support, Housing, and Transportation
-CATEGORIES:  The categories are Single County Authority, Center of Excellence, Regional Recovery Hub, Recovery Community Organization, Warm Handoff, Treatment with RSS, 
Family Counseling, Family Peer Support, Family Assistance, Program, Family Education Program, Family Resources, Recovery House, 
Halfway House, Housing Assistance, Affordable Public Transportation, Carpool Service, Medical Assistance Transportation, 
Recovery Transportation Services, and Vehicle Purchase Assistance, Government, and Other.
The options should be initially each set to display none, and then when the appropriate Resource Type is selected, 
the categories of that type should be displayed:  Recovery Support (Single County Authority, Center of Excellence, Regional Recovery Hub, 
Recovery Community Organization, Warm Handoff, and Treatment with RSS), Family Support (Family Counseling, Family Peer Support, Family Assistance 
Program, Family Education Program, and Family Resources), Housing (Recovery House, Halfway House, and Housing Assistance), and Transportation (Affordable Public 
Transportation, Carpool Service, Medical Assistance Transportation, Recovery Transportation Services, and 
Vehicle Purchase Assistance), and if any one of the four Resource Types are selected, the two additional categories to show are Government 
and Other.


Below this should be a flex row, set to justify start with a div with id of 'counter', containing a "Results 1-25 of X" Counter, with an h4 
heading class applied, on the left.  This should be updated depending on how many results are currently on the page and how many results there
are with the applied parameters.  

Just below this should be a flex row set to justify end, should be a div with an id of 'sort'.  This should contain
on the same line, an h6 heading saying 'Sort By:' and a dropdown menu to sort by Relevance, Alphabetical and Distance.  
The results should be displayed as the cards in a flex-column, with pagination to show only 25 show at a time
with a load more button at the bottom to load more.

Just below this should be the results area, with a div id of 'results'.  It should have a 'container'
class or possible a col class.  The cards should be arranged in one vertical column with 
pagination to show 25 results at a time

The cards should have bootstrap classes 'shadow-lg text-bg-white'.
Inside should be a row element with classes ''row no-gutters p-0'' containing two cols:
One is the SIDENAV, which contains links for WEBSITE, PHONE URL, and GOOGLE MAPS URL, using 
bootstrap icons.  The other col is the card BODY.  
The card sidenav should have the bootstrap classes 'bg-secondary col-2 d-flex flex-column 
justify-content-between align-items-center p-0'.
It should contain three <a> link elements with classes of 'd-flex align-items-center justify-content-center 
flex-grow-1 w-100 text-white', one for WEBSITE which uses the URL from the WEBSITE column, and displays 'bi bi-globe',
one for the phone number which uses the url from PHONE URL, and one for directions which uses the 'bi bi-geo-alt-fill'
for the icon.

The card body should have the bootstrap classes 'col-10 p-4'.
It should have an h3 with class of 'text-secondary' for the LOCATION NAME, h5 with the ORGANIZATION below that,
and then bootstrap badges for the facet values for the RESOURCE TYPE and CATEGORIES.  On the next line down should be 
an h6 with the word "Phone:" and then the value for PHONE, and below that a <br /> to skip a line,
and then <p> element, with <span> for ADDRESS, and on the next line spans for CITY, a comma, STATE, a comma, and then 
ZIP CODE.  Below that should be an h6 saying "Populations Served:" and bootstrap badges for the values of the POPULATIONS
facet.  Below that should be an h6 saying "County:" and bootstrap badges for the values of the COUNTY
facet.  Each of the bootstrap badges containing facet values should be clickable, and if clicked, that facet value should
be added as a filter with a filter chip shown in the chip area.

Below the cards should be a centered button to load more, when pressed 25 more cards should be 
added, and the counter at the top should be updated to show the number of currently visible results
on the page, out of the total number of results available with the applied filters.
